{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","tdStyle","width","height","this","props","rowCount","columnCount","positionPrince","columnKey","column","rowKey","row","react_default","a","createElement","style","src","i","demonsPositions","length","v","React","Component","cells","push","TableCell","key","Table","rows","components_TableRow","border","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","totalMoves","newDemonsPostions","splice","setState","direction","updateGameState","prevProps","prevState","snapshot","alert","_this2","checkkey","e","window","event","keyCode","movePrince","rowsCount","prompt","numOfDemons","parseInt","randomPosition","Math","random","demonPosition","document","addEventListener","console","log","className","components_Table","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.787c1a67.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass TableRow extends React.Component{\r\n    render() {\r\n        let tdStyle = {\r\n            width: 48,\r\n            height: 48\r\n        };\r\n        if(this.props.rowCount != null && this.props.columnCount!=null && this.props.positionPrince!=null){\r\n\r\n                if(this.props.columnKey === this.props.positionPrince.column\r\n                    && this.props.rowKey === this.props.positionPrince.row)\r\n                return(\r\n                    <td style={tdStyle}><img src=\"https://img.icons8.com/color/48/000000/moderator-male.png\" /></td>\r\n            );\r\n\r\n\r\n                for(let i=0; i<this.props.demonsPositions.length; i++){\r\n                    let v = this.props.demonsPositions[i];\r\n                if(v.row === this.props.rowKey && v.column === this.props.columnKey){\r\n                    return(\r\n                        <td style={tdStyle}><img src=\"https://img.icons8.com/color/48/000000/vampire.png\" /></td>\r\n                    )\r\n                }\r\n            }\r\n\r\n\r\n        } else\r\n            return null;\r\n\r\n        return  (<td style={tdStyle}></td>);\r\n    }\r\n}\r\n//https://img.icons8.com/color/48/000000/vampire.png\r\n//https://img.icons8.com/color/48/000000/moderator-male.png\r\nexport default TableRow;","import React from 'react';\r\nimport TableCell from './TableCell';\r\n\r\nclass TableRow extends React.Component{\r\n\r\n    render() {\r\n        if(this.props.rowCount != null && this.props.columnCount!=null){\r\n\r\n            let cells = [];\r\n            for(let i=0; i<this.props.columnCount; i++){\r\n                cells.push(<TableCell key={i}\r\n                columnKey = {i}\r\n            rowKey={this.props.rowKey}\r\n            positionPrince={this.props.positionPrince}\r\n            demonsPositions={this.props.demonsPositions}\r\n            rowCount={this.props.rowCount}\r\n            columnCount={this.props.columnCount} />);\r\n            }\r\n            return(\r\n               <tr>\r\n                   {cells}\r\n               </tr>\r\n            )\r\n        }else\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default TableRow;","import React from 'react';\r\nimport TableRow from './TableRow';\r\n\r\nclass Table extends React.Component{\r\n\r\n    render() {\r\n        if(this.props.rowCount != null && this.props.columnCount!=null){\r\n            let rows = [];\r\n            for(let i=0; i<this.props.rowCount; i++){\r\n                rows.push(<TableRow key={i}\r\n                                    rowKey={i}\r\n                                    positionPrince={this.props.positionPrince}\r\n                                    demonsPositions={this.props.demonsPositions}\r\n                                    rowCount={this.props.rowCount}\r\n                                    columnCount={this.props.columnCount} />);\r\n            }\r\n            return(\r\n                <table border={1}>\r\n                    <tbody>\r\n                    {rows}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }else\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default Table;","import React from 'react';\nimport './App.css';\nimport Table from './components/Table';\nclass App extends  React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            positionPrince: null,\n            demonsPositions: null,\n            rowCount: null,\n            columnCount: null,\n            totalMoves: 0\n    }\n    }\n\n    updateGameState(positionPrince){\n        let newDemonsPostions = this.state.demonsPositions;\n\n\n        for (let i = 0; i < this.state.demonsPositions.length; i++) {\n\n            if (positionPrince.row === this.state.demonsPositions[i].row && positionPrince.column === this.state.demonsPositions[i].column) {\n                newDemonsPostions.splice(i, 1);\n                break;\n            }\n        }\n\n        this.setState({\n            demonsPositions: newDemonsPostions,\n            positionPrince: positionPrince,\n            totalMoves: this.state.totalMoves + 1\n        })\n\n    }\n\n    movePrince(direction) {\n        if (direction === \"up\") {\n            if (this.state.positionPrince.row == 0)\n                return;\n            let positionPrince = {\n                row: this.state.positionPrince.row - 1,\n                column: this.state.positionPrince.column\n            }\n            this.updateGameState(positionPrince);\n\n\n        }\n\n\n        if (direction === \"down\") {\n            if (this.state.positionPrince.row == this.state.rowCount - 1)\n                return;\n            let positionPrince = {\n                row: this.state.positionPrince.row + 1,\n                column: this.state.positionPrince.column\n            }\n\n            this.updateGameState(positionPrince);\n        }\n\n\n        if (direction === \"left\") {\n            if (this.state.positionPrince.column == 0)\n                return;\n            let positionPrince = {\n                row: this.state.positionPrince.row,\n                column: this.state.positionPrince.column - 1\n            }\n            this.updateGameState(positionPrince);\n        }\n\n        if (direction === \"right\") {\n            if (this.state.positionPrince.column == this.state.rowCount - 1)\n                return;\n            let positionPrince = {\n                row: this.state.positionPrince.row,\n                column: this.state.positionPrince.column + 1\n            }\n            this.updateGameState(positionPrince);\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.state.demonsPositions.length == 0)\n        {\n            alert(\"Game complete. Total Moves \"+this.state.totalMoves);\n        }\n}\n\n    componentDidMount() {\n\n        let checkkey = (e) => {\n\n            if(this.state.demonsPositions.length == 0)\n                return;\n\n            e = e || window.event;\n\n            if (e.keyCode == '38') {\n                this.movePrince(\"up\");\n            }\n            else if (e.keyCode == '40') {\n                this.movePrince(\"down\");\n            }\n            else if (e.keyCode == '37') {\n                this.movePrince(\"left\");\n            }\n            else if (e.keyCode == '39') {\n                this.movePrince(\"right\");\n            }\n\n        }\n\n        let rowsCount = prompt(\"Enter width\", \"10\");\n        let columnCount = prompt(\"Enter height\", \"10\");\n\n        let numOfDemons = parseInt((rowsCount*columnCount)/10);\n\n        let demonsPositions = [];\n\n       let positionPrince = { row: parseInt(rowsCount/2), column: parseInt(columnCount/2)};\n\n\n       while(demonsPositions.length != numOfDemons){\n\n           let randomPosition = Math.random() * (rowsCount*columnCount);\n           let demonPosition = {\n               row: parseInt(randomPosition/10),\n               column: parseInt(randomPosition%10)\n           }\n           if(demonPosition !== positionPrince) {\n               demonsPositions.push(demonPosition);\n           }\n       }\n\n        this.setState({\n            positionPrince: positionPrince,\n            demonsPositions: demonsPositions,\n            rowCount: rowsCount,\n            columnCount: columnCount\n        }, () => {\n            document.addEventListener('keydown', checkkey);\n\n        });\n    }\n\n    render (){\nconsole.log(this.state.totalMoves);\n    return(<div className=\"App\">\n      <Table rowCount={this.state.rowCount}\n             positionPrince={this.state.positionPrince}\n             demonsPositions={this.state.demonsPositions}\n             columnCount={this.state.columnCount} />\n    </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}